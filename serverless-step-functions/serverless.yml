service: provisioning-steps 
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'dev'} # default to stage 'dev', allow override from CLI
  profile: ${opt:stage, 'default'} # Allow override of AWS profile. This could also be used to deploy to diff AWS accounts per stage.
  environment:
    #reference the output variable mailboxDynamoDbTableName defined in serverless-provisioning-dbonly project (in the appropriate stage)
    DYNAMODB_TABLE_MBOX: ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableName}   
  iamRoleStatements:
    - Effect: Allow     # allow the step functions state machine to be executed by another lambda
      Action:
        - states:StartExecution
      Resource: "*"
    - Effect: Allow   # allow the lambdas in this project to do database operations
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        #reference the output variable mailboxDynamoDbTableArn defined in serverless-provisioning-dbonly project (in the appropriate stage)
        ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableArn} 
    
resources:

  Outputs:
    ProvisioningStateMachineProxy:
      Description: The ARN of the state machine
      Value:
        Ref: ProvisioningStateMachine   #Even though the name of the step function is camel case we have to capitalize, not sure why.


functions:
  dynamoChangeHandler:
    handler: dynamoChangeHandler.process
    environment:
      # this gives the lambda a handle to execute the provisioning state machine (step functions)
      provisioningstatemachine_arn: ${self:resources.Outputs.ProvisioningStateMachineProxy.Value} 
      # also get a handle on the output value from the Java project so this function can kick off the deletion state machine defined in that project
      deletionstatemachine_arn: ${cf:provisioning-steps-java-${self:provider.stage}.DeletionStateMachineProxy} 
    
    #set up a way to invoke function from DynamoDB stream 
    events:
      - stream: 
          arn: ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableStreamArn}
          batchSize: 1 
          startingPosition: LATEST
          enabled: true
 
  beginProvisioning:  
    handler: beginProvisioning.begin  
  callOutsideSystem:  
    handler: callOutsideSystem.call  
  completeProvisioning:  
    handler: completeProvisioning.complete   
    
  # As of now the serverless framework can't kick off step functions directly from a CloudWatch event
  # https://github.com/horike37/serverless-step-functions/issues/102
  # https://github.com/horike37/serverless-step-functions/issues/49
  # Instead we have to define a lambda function that can watch for a step functions failure and restart the step functions.
  # In many ways this function behaves the same way as dynamoChangeHandler above, except it is kicked off by CloudWatch instead of 
  # a dynamo stream.
  # TODO I'm not sure this will work either, unless it's defined as a scheduled event that looks at the DynamoDB table
  # or somehow is hooked to a CloudWatch alarm. There doesn't seem to be a way to hook an event to a step function failure?
  #provisioningStateMachineRetry:
  #  handler: provisioningStateMachineRetry.retry
  #  environment:
      # this gives the lambda a handle to execute the provisioning state machine (step functions)
  #    provisioningstatemachine_arn: ${self:resources.Outputs.ProvisioningStateMachineProxy.Value}
  #  events:
  #    - cloudwatchEvent:
  #        name: 'provisioning-failed-cloudwatch-event'
  #        event:
  #          source:
  #            - "aws.ec2"
  #          detail-type:
  #            - "EC2 Instance State-change Notification"
  #          detail:
  #            state:
  #              - pending
  #        enabled: true
            
stepFunctions:
  stateMachines:
    provisioningStateMachine:
      name: provisioningStateMachine
      events:
        - http:
            path: begin-provisioning
            method: GET
      definition:
        Comment: "A fake provisioning engine, using Amazon States Language and Lambda"
        StartAt: Wait1
        States:
          Wait1:
            Type: Wait
            Seconds: 5
            Next: BeginProvisioning
          BeginProvisioning:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-beginProvisioning"
            Next: Wait2
          Wait2:
            Type: Wait
            Seconds: 5
            Next: CallOutsideSystem
          CallOutsideSystem:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-callOutsideSystem"
            Retry: # https://docs.aws.amazon.com/step-functions/latest/dg/concepts-error-handling.html
            - ErrorEquals:
              - external-failure
              IntervalSeconds: 4 # wait 4 seconds before trying again
              MaxAttempts: 3 # number of retries
              BackoffRate: 2.5 # the FACTOR by which the retry interval increases during each attempt 
                               # (with 3 retries and an interval of 4, this will retry after 4 sec, 10 secs, and 25 secs for the three retries)
            - ErrorEquals:
              - States.TaskFailed # generic error defined by AWS
              IntervalSeconds: 5 # wait 5 seconds before trying again
              MaxAttempts: 2 # number of retries
              BackoffRate: 1.5 # the FACTOR by which the retry interval increases during each attempt 
                               # (with 2 retries and an interval of 5, this will retry after 5 sec and 7.5 secs for the two retries)
            Next: Wait3  
          Wait3:
            Type: Wait
            Seconds: 5
            Next: DidOutsideSystemDoIt
          DidOutsideSystemDoIt:
            Type: Choice
            Choices: 
              - Variable: "$.value"
                NumericGreaterThan: 0.25
                Next: OutsideSystemDidIt
              - Variable: "$.value"
                NumericLessThan: 0.25
                Next: OutsideSystemFailed
            Default: OutsideSystemFailed
          OutsideSystemDidIt:
            Type: Pass
            Next: CompleteProvisioning
          OutsideSystemFailed:
            Type: Fail
            Cause: "External system didn't do it's job"
          CompleteProvisioning: 
            End: true
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-completeProvisioning"               
              
     
            
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts
