service: provisioning-steps 
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev   #default stage - not sure why this isn't needed in other project
  environment:
    #reference the output variable mailboxDynamoDbTableName defined in serverless-provisioning-dbonly project (in the appropriate stage)
    DYNAMODB_TABLE_MBOX: ${cf:serverless-provisioning-dbonly-${opt:stage, self:provider.stage}.mailboxesDynamoDbTableName}   
  iamRoleStatements:
    - Effect: Allow     # allow the step functions state machine to be executed by another lambda
      Action:
        - states:StartExecution
      Resource: "*"
    - Effect: Allow   # allow the lambdas in this project to do database operations
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        #reference the output variable mailboxDynamoDbTableArn defined in serverless-provisioning-dbonly project (in the appropriate stage)
        ${cf:serverless-provisioning-dbonly-${opt:stage, self:provider.stage}.mailboxesDynamoDbTableArn} 
    
resources:

  Outputs:
    ProvisioningStateMachineProxy:
      Description: The ARN of the state machine
      Value:
        Ref: ProvisioningStateMachine   #Even though the name of the step function is camel case we have to capitalize, not sure why.


functions:
  dynamoChangeHandler:
    handler: dynamoChangeHandler.process
    environment:
      # this gives the lambda a handle to execute the provisioning state machine (step functions)
      provisioningstatemachine_arn: ${self:resources.Outputs.ProvisioningStateMachineProxy.Value} 
      # also get a handle on the output value from the Java project so this function can kick off the deletion state machine defined in that project
      deletionstatemachine_arn: ${cf:provisioning-steps-java-${opt:stage, self:provider.stage}.DeletionStateMachineProxy} 
    
    #set up a way to invoke function from DynamoDB stream 
    events:
      - stream: 
          arn: ${cf:serverless-provisioning-dbonly-${opt:stage, self:provider.stage}.mailboxesDynamoDbTableStreamArn}
          batchSize: 1 
          startingPosition: LATEST
          enabled: true
 
  beginProvisioning:  
    handler: beginProvisioning.begin  
  avoidTheNoid:  
    handler: avoidTheNoid.avoidNoid  
  completeProvisioning:  
    handler: completeProvisioning.complete    
            
stepFunctions:
  stateMachines:
    provisioningStateMachine:
      name: provisioningStateMachine
      events:
        - http:
            path: begin-provisioning
            method: GET
      definition:
        Comment: "A fake provisioning engine, using Amazon States Language and Lambda"
        StartAt: Wait1
        States:
          Wait1:
            Type: Wait
            Seconds: 15
            Next: BeginProvisioning
          BeginProvisioning:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-beginProvisioning"
            Next: Wait2
          Wait2:
            Type: Wait
            Seconds: 15
            Next: AvoidTheNoid
          AvoidTheNoid:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-avoidTheNoid"
            Next: Wait3  
          Wait3:
            Type: Wait
            Seconds: 15
            Next: WasNoidAvoided
          WasNoidAvoided:
            Type: Choice
            Choices: 
              - Variable: "$.value"
                NumericGreaterThan: 0.25
                Next: NoidAvoided
              - Variable: "$.value"
                NumericLessThan: 0.25
                Next: NoidNotAvoided
            Default: NoidNotAvoided
          NoidAvoided:
            Type: Pass
            Next: CompleteProvisioning
          NoidNotAvoided:
            Type: Fail
            Cause: "The Noid can't be beat"
          CompleteProvisioning: 
            End: true
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-completeProvisioning"               
              
     
            
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
