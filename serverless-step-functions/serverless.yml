service: provisioning-steps 
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'dev'} # default to stage 'dev', allow override from CLI
  profile: ${opt:stage, 'default'} # Allow override of AWS profile. This could also be used to deploy to diff AWS accounts per stage.
  environment:
    #reference the output variable mailboxDynamoDbTableName defined in serverless-provisioning-dbonly project (in the appropriate stage)
    DYNAMODB_TABLE_MBOX: ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableName}   
  tracing: true # enable xray tracing 
  iamRoleStatements:
    - Effect: Allow     # allow lambdas access to the history of state machines, as well the ability to create, describe, and execute them
      Action:
        - states:StartExecution
        - states:GetExecutionHistory
        - states:ListExecutions
        - states:DescribeStateMachine
        - states:UpdateStateMachine
      Resource: "*"
    - Effect: Allow     # give lambas the iam:PassRole because it's necessary for a lambda to be able to create a new state machine thru the SDK
      Action:
        - iam:PassRole
      Resource: "arn:aws:iam::*:role/*"
    - Effect: Allow   # allow the lambdas in this project to do database operations
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        #reference the output variable mailboxDynamoDbTableArn defined in serverless-provisioning-dbonly project (in the appropriate stage)
        ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableArn} 
    - Effect: "Allow" 
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    
custom:  
  
  alarmNotificationEmail: ${file(../config/config-${self:provider.stage}.yml):alarmNotificationEmail} 
  alarmNotificationSlackWebhookPath: ${file(../config/config-${self:provider.stage}.yml):alarmNotificationSlackWebhookPath} 
  alarmNotificationSlackChannel: ${file(../config/config-${self:provider.stage}.yml):alarmNotificationSlackChannel} 
  
  # set up a topic name to be used in SNS for failures events on the Provisioning State Machine
  provisioningStateMachineExecutionsFailedSnsTopicName: provisioning-state-machine-executions-failed-${self:provider.stage}
  
  alerts:
    dashboards: true # turn on automatic CloudWatch dashboard as defined by plugin serverless-plugin-aws-alerts

resources:
  Outputs:
    ProvisioningStateMachineProxy:
      Description: The ARN of the state machine
      Value:
        Ref: ProvisioningStateMachine   #Even though the name of the step function is camel case we have to capitalize, not sure why.
    RetryStateMachineProxy:
      Description: The ARN of the state machine to be used for retries
      Value:
        Ref: RetryStateMachine
        
  Resources:
    ProvisioningStateMachineExecutionsFailedSnsTopic: # Create a SNS topic to publish to when the ProvisioningStateMachine has an execution failure
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.provisioningStateMachineExecutionsFailedSnsTopicName}
        Subscription:
          - Protocol: Email # subscribe emails to the topic, using the email that has been specified in config
            Endpoint:  ${self:custom.alarmNotificationEmail}
  
    ProvStateMachineExecutionsFailedAlarm: # Create a cloudwatch alarm that uses the SNS topic above to publish to when   
                                           # the provisioning state machine has at least 1 failure in a 5 minute period
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ProvisioningStateMachineExecutionsFailedAlarm-${self:provider.stage}
        AlarmDescription: An alarm that notifies when the provisioningStateMachine has a failure in at least one execution in the eval period
        Namespace: 'AWS/States'
        MetricName: ExecutionsFailed 
        Dimensions:
          - Name: StateMachineArn
            Value: ${self:resources.Outputs.ProvisioningStateMachineProxy.Value} 
        Statistic: Sum
        ComparisonOperator: GreaterThanOrEqualToThreshold 
        Threshold: 1
        Period: 300
        EvaluationPeriods: 1
        AlarmActions:
          - Ref: ProvisioningStateMachineExecutionsFailedSnsTopic

functions:
  dynamoChangeHandler:
    handler: dynamoChangeHandler.process
    environment:
      # this gives the lambda a handle to execute the provisioning state machine (step functions)
      provisioningstatemachine_arn: ${self:resources.Outputs.ProvisioningStateMachineProxy.Value} 
      # also get a handle on the output value from the Java project so this function can kick off the deletion state machine defined in that project
      deletionstatemachine_arn: ${cf:provisioning-steps-java-${self:provider.stage}.DeletionStateMachineProxy} 
    
    #set up a way to invoke function from DynamoDB stream 
    events:
      - stream: 
          arn: ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableStreamArn}
          batchSize: 1 
          startingPosition: LATEST
          enabled: true
 
  beginProvisioning:  
    handler: beginProvisioning.begin  
  callOutsideSystem:  
    handler: callOutsideSystem.call  
  completeProvisioning:  
    handler: completeProvisioning.complete   
    
  # As of now the serverless framework can't kick off step functions directly from a CloudWatch event.
  # https://github.com/horike37/serverless-step-functions/issues/102
  # https://github.com/horike37/serverless-step-functions/issues/49
  # Instead we have to define a lambda function that can watch for a step functions failure and restart the step functions.
  # In many ways this function behaves the same way as dynamoChangeHandler above, except it is kicked off by CloudWatch publishing
  # to a SNS topic instead of reacting to a dynamo stream. All I do here is reference that SNS topic.
  provisioningStateMachineRetry:
    handler: provisioningStateMachineRetry.retry
    environment:
      # this gives the lambda a handle to execute the provisioning state machine (step functions)
      provisioningstatemachine_arn: ${self:resources.Outputs.ProvisioningStateMachineProxy.Value}
      retrystatemachine_arn: ${self:resources.Outputs.RetryStateMachineProxy.Value} 
    events:
      - sns:   # https://serverless.com/framework/docs/providers/aws/events/sns/
          arn: # I make no apologies for the syntax that follows. I've made peace with it.
            Fn::Join: # Reference the ARN of the SNS topic created above under "Resources"
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":${self:custom.provisioningStateMachineExecutionsFailedSnsTopicName}"
          topicName: ${self:custom.provisioningStateMachineExecutionsFailedSnsTopicName}
  snsToSlack:
    handler: snsToSlack.handler 
    environment:
      alarmNotificationSlackWebhookPath: ${self:custom.alarmNotificationSlackWebhookPath} 
      alarmNotificationSlackChannel: ${self:custom.alarmNotificationSlackChannel} 
    events:
      - sns:   # https://serverless.com/framework/docs/providers/aws/events/sns/
          arn: # I make no apologies for the syntax that follows. I've made peace with it.
            Fn::Join: # Reference the ARN of the SNS topic created above under "Resources"
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":${self:custom.provisioningStateMachineExecutionsFailedSnsTopicName}"
          topicName: ${self:custom.provisioningStateMachineExecutionsFailedSnsTopicName}
  
stepFunctions:
  stateMachines:
    provisioningStateMachine:
      name: provisioningStateMachine
      events:
        - http:
            path: begin-provisioning
            method: GET
      definition:
        Comment: "A fake provisioning engine, using Amazon States Language and Lambda"
        StartAt: Wait1
        States:
          Wait1:
            Type: Wait
            Seconds: 5
            Next: BeginProvisioning
          BeginProvisioning:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-beginProvisioning"
            Next: Wait2
          Wait2:
            Type: Wait
            Seconds: 5
            Next: CallOutsideSystem
          CallOutsideSystem:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-callOutsideSystem"
            Retry: 
            - ErrorEquals:
              - external-failure
              IntervalSeconds: 4 # wait 4 seconds before trying again
              MaxAttempts: 3 # number of retries
              BackoffRate: 2.5 # the FACTOR by which the retry interval increases during each attempt 
                               # (with 3 retries and an interval of 4, this will retry after 4 sec, 10 secs, and 25 secs for the three retries)
            - ErrorEquals:
              - States.TaskFailed # generic error defined by AWS
              IntervalSeconds: 5 # wait 5 seconds before trying again
              MaxAttempts: 2 # number of retries
              BackoffRate: 1.5 # the FACTOR by which the retry interval increases during each attempt 
                               # (with 2 retries and an interval of 5, this will retry after 5 sec and 7.5 secs for the two retries)
            Catch:
            - ErrorEquals:
              - States.ALL # Catch-all
              Next: OutsideSystemFailed
            Next: Wait3  
          Wait3:
            Type: Wait
            Seconds: 5
            Next: DidOutsideSystemDoIt
          DidOutsideSystemDoIt:
            Type: Choice
            Choices: 
              - Variable: "$.value"
                NumericGreaterThan: 0.01
                Next: OutsideSystemSucceeded
              - Variable: "$.value"
                NumericLessThan: 0.01
                Next: OutsideSystemFailed
            Default: OutsideSystemFailed
          OutsideSystemSucceeded:
            Type: Pass
            Next: CompleteProvisioning
          OutsideSystemFailed:
            Type: Fail
            Cause: "External system didn't do it's job"
          CompleteProvisioning: 
            End: true
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-completeProvisioning"               
              
    # Set up a (basically) empty state machine, which will be used in the lambda function provisioningStateMachineRetry, to retry
    # the provisioningStateMachine step functions, but with modifications.
    # The advantage of doing it this way is that the state machine can be cleaned up through CloudFormation.
    retryStateMachine:
       name: retryStateMachine
       definition:
        Comment: "An empty state machine to be filled in for retries"
        StartAt: Wait1
        States:
          Wait1:
            Type: Wait
            Seconds: 5
            End: true
            
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts
  - serverless-plugin-tracing
