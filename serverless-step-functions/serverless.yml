service: provisioning-steps 
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'dev'} # default to stage 'dev', allow override from CLI
  profile: ${opt:stage, 'default'} # Allow override of AWS profile. This could also be used to deploy to diff AWS accounts per stage.
  environment:
    #reference the output variable mailboxDynamoDbTableName defined in serverless-provisioning-dbonly project (in the appropriate stage)
    DYNAMODB_TABLE_MBOX: ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableName}   
  iamRoleStatements:
    - Effect: Allow     # allow the step functions state machine to be executed by another lambda
      Action:
        - states:StartExecution
      Resource: "*"
    - Effect: Allow   # allow the lambdas in this project to do database operations
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        #reference the output variable mailboxDynamoDbTableArn defined in serverless-provisioning-dbonly project (in the appropriate stage)
        ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableArn} 
    
custom:  
  
  alarmNotificationEmail: ${file(../config/config-${self:provider.stage}.yml):alarmNotificationEmail}
  sesFromAddress: ${file(../config/config-${self:provider.stage}.yml):sesFromAddress}
  
  # set up a topic name to be used in SNS for failures events on the Provisioning State Machine
  provisioningStateMachineFailureSnsTopicName: provisioning-state-machine-failure-${self:provider.stage}
  
  alerts:
    dashboards: true
    
    #Attempting to define a metric alarm for step functions - can't figure out how to apply this definition to the state machine yet
    definitions:  
      customAlarm:
        description: 'My custom alarm'
        namespace: 'AWS/States'
        metric: ExecutionsFailed
        threshold: 1
        statistic: Sum
        period: 300
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
    #
      
resources:
  Outputs:
    ProvisioningStateMachineProxy:
      Description: The ARN of the state machine
      Value:
        Ref: ProvisioningStateMachine   #Even though the name of the step function is camel case we have to capitalize, not sure why.
  Resources:
    ProvisioningStateMachineFailureSnsTopic: # Create a SNS topic to publish to when the ProvisioningStateMachine has an execution failure
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.provisioningStateMachineFailureSnsTopicName}

functions:
  dynamoChangeHandler:
    handler: dynamoChangeHandler.process
    environment:
      # this gives the lambda a handle to execute the provisioning state machine (step functions)
      provisioningstatemachine_arn: ${self:resources.Outputs.ProvisioningStateMachineProxy.Value} 
      # also get a handle on the output value from the Java project so this function can kick off the deletion state machine defined in that project
      deletionstatemachine_arn: ${cf:provisioning-steps-java-${self:provider.stage}.DeletionStateMachineProxy} 
    
    #set up a way to invoke function from DynamoDB stream 
    events:
      - stream: 
          arn: ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableStreamArn}
          batchSize: 1 
          startingPosition: LATEST
          enabled: true
 
  beginProvisioning:  
    handler: beginProvisioning.begin  
  callOutsideSystem:  
    handler: callOutsideSystem.call  
  completeProvisioning:  
    handler: completeProvisioning.complete   
    
  # As of now the serverless framework can't kick off step functions directly from a CloudWatch event
  # https://github.com/horike37/serverless-step-functions/issues/102
  # https://github.com/horike37/serverless-step-functions/issues/49
  # Instead we have to define a lambda function that can watch for a step functions failure and restart the step functions.
  # In many ways this function behaves the same way as dynamoChangeHandler above, except it is kicked off by CloudWatch publishing
  # to a SNS topic instead of reacting to a dynamo stream.
  provisioningStateMachineRetry:
    handler: provisioningStateMachineRetry.retry
    environment:
      # this gives the lambda a handle to execute the provisioning state machine (step functions)
      provisioningstatemachine_arn: ${self:resources.Outputs.ProvisioningStateMachineProxy.Value}
    events:
      - sns:   # https://serverless.com/framework/docs/providers/aws/events/sns/
          arn: # I make no apologizes for the syntax that follows. I've made peace with it.
            Fn::Join: # Reference the ARN of the SNS topic created above under "Resources"
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":${self:custom.provisioningStateMachineFailureSnsTopicName}"
          topicName: ${self:custom.provisioningStateMachineFailureSnsTopicName}
            
stepFunctions:
  stateMachines:
    provisioningStateMachine:
      name: provisioningStateMachine
      events:
        - http:
            path: begin-provisioning
            method: GET
      definition:
        Comment: "A fake provisioning engine, using Amazon States Language and Lambda"
        StartAt: Wait1
        States:
          Wait1:
            Type: Wait
            Seconds: 5
            Next: BeginProvisioning
          BeginProvisioning:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-beginProvisioning"
            Next: Wait2
          Wait2:
            Type: Wait
            Seconds: 5
            Next: CallOutsideSystem
          CallOutsideSystem:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-callOutsideSystem"
            Retry: 
            - ErrorEquals:
              - external-failure
              IntervalSeconds: 4 # wait 4 seconds before trying again
              MaxAttempts: 3 # number of retries
              BackoffRate: 2.5 # the FACTOR by which the retry interval increases during each attempt 
                               # (with 3 retries and an interval of 4, this will retry after 4 sec, 10 secs, and 25 secs for the three retries)
            - ErrorEquals:
              - States.TaskFailed # generic error defined by AWS
              IntervalSeconds: 5 # wait 5 seconds before trying again
              MaxAttempts: 2 # number of retries
              BackoffRate: 1.5 # the FACTOR by which the retry interval increases during each attempt 
                               # (with 2 retries and an interval of 5, this will retry after 5 sec and 7.5 secs for the two retries)
            Catch:
            - ErrorEquals:
              - States.ALL # Catch-all
              Next: OutsideSystemFailed
            Next: Wait3  
          Wait3:
            Type: Wait
            Seconds: 5
            Next: DidOutsideSystemDoIt
          DidOutsideSystemDoIt:
            Type: Choice
            Choices: 
              - Variable: "$.value"
                NumericGreaterThan: 0.25
                Next: OutsideSystemSucceeded
              - Variable: "$.value"
                NumericLessThan: 0.25
                Next: OutsideSystemFailed
            Default: OutsideSystemFailed
          OutsideSystemSucceeded:
            Type: Pass
            Next: CompleteProvisioning
          OutsideSystemFailed:
            Type: Fail
            Cause: "External system didn't do it's job"
          CompleteProvisioning: 
            End: true
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-completeProvisioning"               
              
     
            
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts
