# Built based on https://serverless.com/blog/how-to-manage-your-aws-step-functions-with-serverless/

service: provisioning-steps 
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev   #default stage - not sure why this isn't needed in other project
  environment:
    DYNAMODB_TABLE_MBOX: mailbox-${opt:stage, self:provider.stage}
    
resources:
  Resources:
        
    MailboxesDynamoDbTable: #eventually this should be defined outside of this file since CloudFormation does not support global tables
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain #retain table and data between deployments. Can use "Delete" to delete table between deployments.
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_MBOX}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

functions:
  hello:
    handler: handler.hello
    
    #set up a way to invoke function from DynamoDB stream
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              -  MailboxesDynamoDbTable
              - StreamArn
          batchSize: 1
          #arn: arn:aws:dynamodb:us-east-1:849835118694:table/mailbox-dev/stream/2018-04-06T19:31:28.749 #there doesn't seem to be a way to make this generic
          #batchSize: 20
          #startingPosition: TRIM_HORIZON
          #enabled: true
      #- stream:
      #    type: dynamodb
      #    arn:
      #      Fn::GetAtt:
      #        - MailboxesDynamoDbTable
      #        - StreamArn
#      - stream:
#          type: dynamodb
#          arn:
#            Fn::ImportValue: MyExportedDynamoDbStreamArnId
#      - stream:
#          type: kinesis
#          arn:
#            Fn::GetAtt:
#              - MyKinesisStream
#              - Arn
#      - stream:
#          type: kinesis
#          arn:
#            Fn::ImportValue: MyExportedKinesisStreamArnId
            
            
stepFunctions:
  stateMachines:
    hellostepfunc1:
      name: myStateMachine
      events:
        - http:
            path: hello
            method: GET
      definition:
        Comment: "A Hello World example of the Amazon States Language using an AWS Lambda Function"
        StartAt: HelloWorld1
        States:
          HelloWorld1:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-hello"
            End: true
            
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters