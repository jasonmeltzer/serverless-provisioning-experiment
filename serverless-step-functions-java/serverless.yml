service: provisioning-steps-java

frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'} # default to stage 'dev', allow override from CLI
  profile: ${opt:stage, 'default'} # Allow override of AWS profile. This could also be used to deploy to diff AWS accounts per stage.
  environment:
    #reference the output variable mailboxDynamoDbTableName defined in serverless-provisioning-dbonly project (in the appropriate stage)
    DYNAMODB_TABLE_MBOX: ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableName} 
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        #reference the output variable mailboxDynamoDbTableArn defined in serverless-provisioning-dbonly project (in the appropriate stage)
        ${cf:serverless-provisioning-dbonly-${self:provider.stage}.mailboxesDynamoDbTableArn} 
  
package:
  artifact: target/provisioning-steps-java.jar

resources:
  Outputs:
    DeletionStateMachineProxy: #output this variable so that a lambda function in another project can reference it and kick off the deletion steps
      Description: The ARN of the deletion state machine 
      Value:
        Ref: DeletionStateMachine #this must be capitalized even though the name below is camel case
        

functions:
  checkConfirmDeletion:
    handler: com.example.CheckConfirmDeletion::handleRequest
  deletionHandler:
    handler: com.example.DeletionHandler
          
stepFunctions:
  stateMachines:
    deletionStateMachine:
      name: deletionStateMachine
      definition:
        Comment: "A fake engine, using Amazon States Language and Lambda"
        StartAt: Wait1
        States:
          Wait1:
            Type: Wait
            Seconds: 5
            Next: CheckConfirmDeletion
          CheckConfirmDeletion:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-checkConfirmDeletion"
            Next: DeletionHandler
            Catch:
            - ErrorEquals:
              - com.example.DeleteNotConfirmedException
              Next: DeleteNotConfirmed
          DeletionHandler:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-deletionHandler"
            End: true
          DeleteNotConfirmed:
            Type: Pass 
            End: true
       
         
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
