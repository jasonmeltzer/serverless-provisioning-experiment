service: serverless-provisioning-dbonly

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_TABLE_MBOX: mailbox-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_MBOX}"
      
resources:
  Resources:
        
    MailboxesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain #retain table and data between deployments. Can use "Delete" to delete table between deployments.
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_MBOX}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
  Outputs:
    #define an output with the dynamo db table arn so that another serverless project can reference it
    mailboxesDynamoDbTableArn:
      Value: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_MBOX}"
      Export:
        Name: mailboxesDynamoDbTableArn
    #also give it the table name
    mailboxesDynamoDbTableName:
      Value: "mailbox-${opt:stage, self:provider.stage}"
      Export:
        Name: mailboxesDynamoDbTableName
